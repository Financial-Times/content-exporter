apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.service.name }}
  labels:
    chart: "{{ .Chart.Name | trunc 63 }}"
    chartVersion: "{{ .Chart.Version | trunc 63 }}"
    visualize: "true"
    app: {{ .Values.service.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.service.name }}
        visualize: "true"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ .Values.service.name }}
            topologyKey: "kubernetes.io/hostname"
      serviceAccountName: {{ .Values.service.serviceAccountName }}
      containers:
      - name: {{ .Values.service.name }}
        image: "{{ .Values.image.repository }}:{{ .Chart.Version }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: APP_NAME
          value: "{{ .Values.service.name }}"
        - name: ENRICHED_CONTENT_API_URL
          value: "{{ .Values.env.enrichedContent.baseUrl }}/{{ .Values.env.enrichedContent.apiPath }}/"
        - name: ENRICHED_CONTENT_HEALTH_URL
          value: "{{ .Values.env.enrichedContent.baseUrl }}/__gtg"
        - name: S3_WRITER_GENERIC_API_URL
          value: "{{ .Values.env.s3Writer.baseUrl }}/{{ .Values.env.s3Writer.apiGenericPath }}/"
        - name: S3_PRESIGNER_API_URL
          value: "{{ .Values.env.s3Writer.baseUrl }}/{{ .Values.env.s3Writer.apiPresignerPath }}/"
        - name: S3_WRITER_API_URL
          value: "{{ .Values.env.s3Writer.baseUrl }}/{{ .Values.env.s3Writer.apiPath }}/"
        - name: S3_WRITER_HEALTH_URL
          value: "{{ .Values.env.s3Writer.baseUrl }}/__gtg"
        - name: X_POLICY_HEADER_VALUES
          value: "{{ .Values.env.xPolicyHeaderValues }}"
        - name: ALLOWED_CONTENT_TYPES
          value: "{{ .Values.env.allowedContentTypes }}"
        - name: ALLOWED_PUBLISH_UUIDS
          value: "{{ .Values.env.allowedPublishUUIDs }}"
        - name: DB_NAME
          value: "{{ .Values.env.db.database }}"
        - name: DB_COLLECTION
          value: "{{ .Values.env.db.collection }}"
        - name: ECS_DB_ADDR
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: aws.rds.enriched-content-store.address
        - name: ECS_DB_CRED
          valueFrom:
            secretKeyRef:
              name: doppler-global-secrets
              key: ENRICHED_CONT_RW_PG_RDSCREDENTIALS
        - name: DB_CLUSTER_ADDRESS
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: documentstore.cluster.address
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: doppler-global-secrets
              key: DOCUMENT_STORE_CLUSTER_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: doppler-global-secrets
              key: DOCUMENT_STORE_CLUSTER_PASSWORD
        - name: DB_TIMEOUT
          value: "{{ .Values.env.db.timeout }}"
        - name: KAFKA_ADDRS
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: msk.kafka.broker.url
        - name: KAFKA_CLUSTER_ARN
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: msk.kafka.cluster.arn
        - name: IS_INC_EXPORT_ENABLED
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: contentExporter.isIncExportEnabled
        - name: GROUP_ID
          value: "{{ .Values.env.kafka.groupId }}"
        - name: TOPIC
          value: "{{ .Values.env.kafka.topic }}"
        - name: CONTENT_ORIGIN_ALLOWLIST
          value: {{ .Values.env.contentOriginAllowlist }}
        - name: CONTENT_RETRIEVAL_THROTTLE
          value: "{{ .Values.env.contentRetrievalThrottle }}"
        - name: OPA_URL
          value: "{{ .Values.env.opa.url }}"
        - name: OPA_POLICY_PATH
          value: "{{ .Values.env.opa.policyPath }}"
        ports:
        - containerPort: 8080
        livenessProbe:
          initialDelaySeconds: 5
          tcpSocket:
            port: 8080
        readinessProbe:
          httpGet:
            path: /__gtg
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 3
        resources:
{{ toYaml .Values.resources | indent 12 }}
      {{- if .Values.openPolicyAgentSidecar }}
      - name: "{{ .Values.openPolicyAgentSidecar.name }}"
        image: "{{ .Values.openPolicyAgentSidecar.repository }}:{{ .Values.openPolicyAgentSidecar.tag }}"
        imagePullPolicy: {{ .Values.openPolicyAgentSidecar.pullPolicy }}
        env:
          - name: POLICY_BUCKET
            valueFrom:
              configMapKeyRef:
                name: global-config
                key: opa.policy2.bucket
        ports:
          - name: http
            containerPort: 8181
        livenessProbe:
          httpGet:
            path: /health
            scheme: HTTP
            port: 8181
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health?bundle=true
            scheme: HTTP
            port: 8181
          initialDelaySeconds: 5
          periodSeconds: 10
        args:
          - "run"
          - "--ignore=.*"
          - "--server"
          - "--log-level=error"
          - "--log-format=json"
          - "--set=services.bundlesS3Bucket.url=$(POLICY_BUCKET)"
          - "--set=services.bundlesS3Bucket.credentials.s3_signing.web_identity_credentials.aws_region=$(AWS_REGION)"
          - "--set=bundles.contentExporter.service=bundlesS3Bucket"
          - "--set=bundles.contentExporter.resource=content_exporter.bundle.tar.gz"
          - "--set=bundles.contentExporter.polling.min_delay_seconds=120"
          - "--set=bundles.contentExporter.polling.max_delay_seconds=300"
      {{- end}}
